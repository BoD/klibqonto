plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
}

apply plugin: 'maven-publish'
apply plugin: 'native-suspend-function'

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = '1.8'
        }
    }

    js {
        browser {
        }
        nodejs {
        }
    }

    // Unfortunately de.ffuf.kotlin.multiplatform.annotations is not compatible with macosX64,
    // so commenting for now
//    macosX64('macos') {
//        binaries {
//            framework {
//            }
//        }
//    }

    iosX64('ios') {
        binaries {
            framework {
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core:$versions.ktor"
                implementation "io.ktor:ktor-client-json:$versions.ktor"
                implementation "io.ktor:ktor-client-serialization:$versions.ktor"
                implementation "de.ffuf.kotlin.multiplatform.annotations:annotations:$versions.plugins.nativeSuspendFunctions"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-client-okhttp:$versions.ktor"
                implementation "io.ktor:ktor-client-serialization-jvm:$versions.ktor"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                api "io.ktor:ktor-client-serialization-js:$versions.ktor"
                api "io.ktor:ktor-client-json-js:$versions.ktor"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

//        macosMain {
//            dependencies {
//                implementation "io.ktor:ktor-client-serialization-native:$versions.ktor"
//                implementation "io.ktor:ktor-client-json-native:$versions.ktor"
//                implementation "io.ktor:ktor-client-curl:$versions.ktor"
//            }
//        }
//        macosTest {
//        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-serialization-native:$versions.ktor"
                implementation "io.ktor:ktor-client-json-native:$versions.ktor"
                implementation "io.ktor:ktor-client-ios:$versions.ktor"
            }
        }
        iosTest {
        }
    }
}

nativeSuspendExtension {
    outputDirectory = 'src/commonMain/kotlin'
    scopeName = 'GlobalScope'
    imports = ['kotlinx.coroutines.GlobalScope']
    packageName = 'org.jraf.klibqonto.client.extensions'
}

//// Create a Version.kt file and add it to the source set
//task generateSources {
//    def outputDir = file("$buildDir/generated/source/kotlin")
//    outputs.dir outputDir
//    doFirst {
//        def outputWithPackageDir = new File(outputDir, "org/jraf/klibqonto/internal/client")
//        outputWithPackageDir.mkdirs()
//        new File(outputWithPackageDir, "Version.kt").write("package org.jraf.klibqonto.internal.client\ninternal const val VERSION = \"$project.version\"")
//    }
//}
//compileKotlin.dependsOn generateSources
//compileKotlin.source += generateSources.outputs.files

