plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61'
}

apply plugin: 'maven-publish'

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = '1.8'
        }
    }

    js {
        browser {
        }
        nodejs {
        }
    }

    macosX64('macos') {
        binaries {
            framework {
                // See https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md#to-use
                freeCompilerArgs += '-Xobjc-generics'
            }
        }
    }

    iosX64('ios') {
        binaries {
            framework {
                // See https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md#to-use
                freeCompilerArgs += '-Xobjc-generics'
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-io:$versions.kotlinxIo"
                implementation "io.ktor:ktor-client-core:$versions.ktor"
                implementation "io.ktor:ktor-client-json:$versions.ktor"
                implementation "io.ktor:ktor-client-serialization:$versions.ktor"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$versions.coroutines"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$versions.kotlinxIo"
                implementation "io.ktor:ktor-client-okhttp:$versions.ktor"
                implementation "io.ktor:ktor-client-serialization-jvm:$versions.ktor"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-io-js:$versions.kotlinxIo"
                api "io.ktor:ktor-client-serialization-js:$versions.ktor"
                api "io.ktor:ktor-client-json-js:$versions.ktor"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        macosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-io-native:$versions.kotlinxIo"
                implementation "io.ktor:ktor-client-serialization-native:$versions.ktor"
                implementation "io.ktor:ktor-client-json-native:$versions.ktor"
                implementation "io.ktor:ktor-client-curl:$versions.ktor"
            }
        }
        macosTest {
        }

        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-io-native:$versions.kotlinxIo"
                implementation "io.ktor:ktor-client-serialization-native:$versions.ktor"
                implementation "io.ktor:ktor-client-json-native:$versions.ktor"
                implementation "io.ktor:ktor-client-ios:$versions.ktor"
            }
        }
        iosTest {
        }
    }
}

//// Create a Version.kt file and add it to the source set
//task generateSources {
//    def outputDir = file("$buildDir/generated/source/kotlin")
//    outputs.dir outputDir
//    doFirst {
//        def outputWithPackageDir = new File(outputDir, "org/jraf/klibqonto/internal/client")
//        outputWithPackageDir.mkdirs()
//        new File(outputWithPackageDir, "Version.kt").write("package org.jraf.klibqonto.internal.client\ninternal const val VERSION = \"$project.version\"")
//    }
//}
//compileKotlin.dependsOn generateSources
//compileKotlin.source += generateSources.outputs.files

